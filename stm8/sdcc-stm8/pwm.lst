                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module pwm
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 ;--------------------------------------------------------
                                     13 ; ram data
                                     14 ;--------------------------------------------------------
                                     15 	.area DATA
                                     16 ;--------------------------------------------------------
                                     17 ; ram data
                                     18 ;--------------------------------------------------------
                                     19 	.area INITIALIZED
                                     20 ;--------------------------------------------------------
                                     21 ; Stack segment in internal ram 
                                     22 ;--------------------------------------------------------
                                     23 	.area	SSEG
      000000                         24 __start__stack:
      000000                         25 	.ds	1
                                     26 
                                     27 ;--------------------------------------------------------
                                     28 ; absolute external ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DABS (ABS)
                                     31 
                                     32 ; default segment ordering for linker
                                     33 	.area HOME
                                     34 	.area GSINIT
                                     35 	.area GSFINAL
                                     36 	.area CONST
                                     37 	.area INITIALIZER
                                     38 	.area CODE
                                     39 
                                     40 ;--------------------------------------------------------
                                     41 ; interrupt vector 
                                     42 ;--------------------------------------------------------
                                     43 	.area HOME
      000000                         44 __interrupt_vect:
      000000 82v00u00u00             45 	int s_GSINIT ; reset
                                     46 ;--------------------------------------------------------
                                     47 ; global & static initialisations
                                     48 ;--------------------------------------------------------
                                     49 	.area HOME
                                     50 	.area GSINIT
                                     51 	.area GSFINAL
                                     52 	.area GSINIT
      000000                         53 __sdcc_gs_init_startup:
      000000                         54 __sdcc_init_data:
                                     55 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]   56 	ldw x, #l_DATA
      000003 27 07            [ 1]   57 	jreq	00002$
      000005                         58 00001$:
      000005 72 4FuFFuFF      [ 1]   59 	clr (s_DATA - 1, x)
      000009 5A               [ 2]   60 	decw x
      00000A 26 F9            [ 1]   61 	jrne	00001$
      00000C                         62 00002$:
      00000C AEr00r00         [ 2]   63 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]   64 	jreq	00004$
      000011                         65 00003$:
      000011 D6uFFuFF         [ 1]   66 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]   67 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]   68 	decw	x
      000018 26 F7            [ 1]   69 	jrne	00003$
      00001A                         70 00004$:
                                     71 ; stm8_genXINIT() end
                                     72 	.area GSFINAL
      000000 CCr00r04         [ 2]   73 	jp	__sdcc_program_startup
                                     74 ;--------------------------------------------------------
                                     75 ; Home
                                     76 ;--------------------------------------------------------
                                     77 	.area HOME
                                     78 	.area HOME
      000004                         79 __sdcc_program_startup:
      000004 CCr00r00         [ 2]   80 	jp	_main
                                     81 ;	return from main will return to caller
                                     82 ;--------------------------------------------------------
                                     83 ; code
                                     84 ;--------------------------------------------------------
                                     85 	.area CODE
                                     86 ;	pwm.c: 44: void main(void) {
                                     87 ;	-----------------------------------------
                                     88 ;	 function main
                                     89 ;	-----------------------------------------
      000000                         90 _main:
                                     91 ;	pwm.c: 45: clockSetup(0);
      000000 4B 00            [ 1]   92 	push	#0x00
      000002 CDr00r0C         [ 4]   93 	call	_clockSetup
      000005 84               [ 1]   94 	pop	a
                                     95 ;	pwm.c: 46: PWM_Setup();
      000006 CDr00r13         [ 4]   96 	call	_PWM_Setup
                                     97 ;	pwm.c: 47: loop();
                                     98 ;	pwm.c: 48: }
      000009 CCr00r61         [ 2]   99 	jp	_loop
                                    100 ;	pwm.c: 50: void clockSetup(char frequency) {
                                    101 ;	-----------------------------------------
                                    102 ;	 function clockSetup
                                    103 ;	-----------------------------------------
      00000C                        104 _clockSetup:
                                    105 ;	pwm.c: 51: CLK_CKDIVR = frequency;
      00000C AE 50 C6         [ 2]  106 	ldw	x, #0x50c6
      00000F 7B 03            [ 1]  107 	ld	a, (0x03, sp)
      000011 F7               [ 1]  108 	ld	(x), a
                                    109 ;	pwm.c: 52: }
      000012 81               [ 4]  110 	ret
                                    111 ;	pwm.c: 54: void PWM_Setup(void) {
                                    112 ;	-----------------------------------------
                                    113 ;	 function PWM_Setup
                                    114 ;	-----------------------------------------
      000013                        115 _PWM_Setup:
                                    116 ;	pwm.c: 57: TIM2_PSCR = (uint8_t) 0;
      000013 35 00 53 0E      [ 1]  117 	mov	0x530e+0, #0x00
                                    118 ;	pwm.c: 58: TIM2_ARRH = (uint8_t) 999 >> 8;
      000017 35 00 53 0F      [ 1]  119 	mov	0x530f+0, #0x00
                                    120 ;	pwm.c: 59: TIM2_ARRL = (uint8_t) 999;
      00001B 35 E7 53 10      [ 1]  121 	mov	0x5310+0, #0xe7
                                    122 ;	pwm.c: 62: TIM2_CCER1 &= (uint8_t) (~(0x01 | 0x02));
      00001F C6 53 0A         [ 1]  123 	ld	a, 0x530a
      000022 A4 FC            [ 1]  124 	and	a, #0xfc
                                    125 ;	pwm.c: 65: TIM2_CCER1 |= (uint8_t) ( (uint8_t) (0x11 & 0x01) | (uint8_t) (0x00 & 0x02));
      000024 C7 53 0A         [ 1]  126 	ld	0x530a, a
      000027 AA 01            [ 1]  127 	or	a, #0x01
      000029 C7 53 0A         [ 1]  128 	ld	0x530a, a
                                    129 ;	pwm.c: 68: TIM2_CCMR1 =  (uint8_t) ((TIM2_CCMR1 & (uint8_t) ~0x70) | ((uint8_t)0x60));
      00002C C6 53 07         [ 1]  130 	ld	a, 0x5307
      00002F A4 8F            [ 1]  131 	and	a, #0x8f
      000031 AA 60            [ 1]  132 	or	a, #0x60
      000033 C7 53 07         [ 1]  133 	ld	0x5307, a
                                    134 ;	pwm.c: 71: TIM2_CCR1H = (uint8_t) 0;
      000036 35 00 53 11      [ 1]  135 	mov	0x5311+0, #0x00
                                    136 ;	pwm.c: 72: TIM2_CCR1L = (uint8_t) 0;
      00003A 35 00 53 12      [ 1]  137 	mov	0x5312+0, #0x00
                                    138 ;	pwm.c: 75: TIM2_CCMR1 |= (uint8_t) 0x08; 
      00003E 72 16 53 07      [ 1]  139 	bset	21255, #3
                                    140 ;	pwm.c: 78: TIM2_CR1 |= (uint8_t) 0x80;
      000042 C6 53 00         [ 1]  141 	ld	a, 0x5300
      000045 AA 80            [ 1]  142 	or	a, #0x80
                                    143 ;	pwm.c: 81: TIM2_CR1 |= (uint8_t) 0x01;
      000047 C7 53 00         [ 1]  144 	ld	0x5300, a
      00004A AA 01            [ 1]  145 	or	a, #0x01
      00004C C7 53 00         [ 1]  146 	ld	0x5300, a
                                    147 ;	pwm.c: 82: }
      00004F 81               [ 4]  148 	ret
                                    149 ;	pwm.c: 84: void setDutyCycle(unsigned int dutyCycle) {
                                    150 ;	-----------------------------------------
                                    151 ;	 function setDutyCycle
                                    152 ;	-----------------------------------------
      000050                        153 _setDutyCycle:
      000050 52 02            [ 2]  154 	sub	sp, #2
                                    155 ;	pwm.c: 94: TIM2_CCR1H = (uint8_t) ((0x0000 | dutyCycle) >> 8);
      000052 1E 05            [ 2]  156 	ldw	x, (0x05, sp)
      000054 9E               [ 1]  157 	ld	a, xh
      000055 0F 01            [ 1]  158 	clr	(0x01, sp)
      000057 C7 53 11         [ 1]  159 	ld	0x5311, a
                                    160 ;	pwm.c: 95: TIM2_CCR1L = (uint8_t) dutyCycle;
      00005A 9F               [ 1]  161 	ld	a, xl
      00005B C7 53 12         [ 1]  162 	ld	0x5312, a
                                    163 ;	pwm.c: 97: }	
      00005E 5B 02            [ 2]  164 	addw	sp, #2
      000060 81               [ 4]  165 	ret
                                    166 ;	pwm.c: 99: void loop(void) {
                                    167 ;	-----------------------------------------
                                    168 ;	 function loop
                                    169 ;	-----------------------------------------
      000061                        170 _loop:
      000061 52 02            [ 2]  171 	sub	sp, #2
                                    172 ;	pwm.c: 101: unsigned int perCent = 0;	
      000063 5F               [ 1]  173 	clrw	x
                                    174 ;	pwm.c: 105: while(perCent < 1000) {
      000064                        175 00101$:
      000064 A3 03 E8         [ 2]  176 	cpw	x, #0x03e8
      000067 24 10            [ 1]  177 	jrnc	00115$
                                    178 ;	pwm.c: 106: setDutyCycle(perCent);
      000069 89               [ 2]  179 	pushw	x
      00006A 89               [ 2]  180 	pushw	x
      00006B CDr00r50         [ 4]  181 	call	_setDutyCycle
      00006E 5B 02            [ 2]  182 	addw	sp, #2
      000070 85               [ 2]  183 	popw	x
                                    184 ;	pwm.c: 107: perCent++;
      000071 5C               [ 1]  185 	incw	x
                                    186 ;	pwm.c: 108: delay();
      000072 89               [ 2]  187 	pushw	x
      000073 CDr00r96         [ 4]  188 	call	_delay
      000076 85               [ 2]  189 	popw	x
      000077 20 EB            [ 2]  190 	jra	00101$
                                    191 ;	pwm.c: 111: while(perCent > 0) {
      000079                        192 00115$:
      000079 1F 01            [ 2]  193 	ldw	(0x01, sp), x
      00007B                        194 00104$:
      00007B 16 01            [ 2]  195 	ldw	y, (0x01, sp)
      00007D 27 E5            [ 1]  196 	jreq	00101$
                                    197 ;	pwm.c: 112: setDutyCycle(perCent);
      00007F 1E 01            [ 2]  198 	ldw	x, (0x01, sp)
      000081 89               [ 2]  199 	pushw	x
      000082 CDr00r50         [ 4]  200 	call	_setDutyCycle
      000085 5B 02            [ 2]  201 	addw	sp, #2
                                    202 ;	pwm.c: 113: perCent--;
      000087 1E 01            [ 2]  203 	ldw	x, (0x01, sp)
      000089 5A               [ 2]  204 	decw	x
      00008A 1F 01            [ 2]  205 	ldw	(0x01, sp), x
                                    206 ;	pwm.c: 114: delay();
      00008C 89               [ 2]  207 	pushw	x
      00008D CDr00r96         [ 4]  208 	call	_delay
      000090 85               [ 2]  209 	popw	x
      000091 20 E8            [ 2]  210 	jra	00104$
                                    211 ;	pwm.c: 120: }
      000093 5B 02            [ 2]  212 	addw	sp, #2
      000095 81               [ 4]  213 	ret
                                    214 ;	pwm.c: 122: void delay(void) {
                                    215 ;	-----------------------------------------
                                    216 ;	 function delay
                                    217 ;	-----------------------------------------
      000096                        218 _delay:
                                    219 ;	pwm.c: 124: while (counter) counter--;
      000096 AE 13 88         [ 2]  220 	ldw	x, #0x1388
      000099 90 5F            [ 1]  221 	clrw	y
      00009B                        222 00101$:
      00009B 5D               [ 2]  223 	tnzw	x
      00009C 26 05            [ 1]  224 	jrne	00117$
      00009E 90 5D            [ 2]  225 	tnzw	y
      0000A0 26 01            [ 1]  226 	jrne	00117$
      0000A2 81               [ 4]  227 	ret
      0000A3                        228 00117$:
      0000A3 1D 00 01         [ 2]  229 	subw	x, #0x0001
      0000A6 24 F3            [ 1]  230 	jrnc	00101$
      0000A8 90 5A            [ 2]  231 	decw	y
      0000AA 20 EF            [ 2]  232 	jra	00101$
                                    233 ;	pwm.c: 125: }
      0000AC 81               [ 4]  234 	ret
                                    235 	.area CODE
                                    236 	.area CONST
                                    237 	.area INITIALIZER
                                    238 	.area CABS (ABS)
